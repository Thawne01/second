"""
1.函数首先根据要不要传入参数分为有参函数和无参函数。无参函数的运行不会涉及到外部的变量，相对有参函数而言独立性更高，即便外部变量的值有问题也可以照常运行，所以在调用函数前
或许需要对变量的值进行条件判断。有参函数接收来自外部变量的值，并在此基础上进行一些运算。根据传入参数的方式可分为位置传参和关键字传参。位置传参需要在传参数时将参数的位置
与定义的位置一一对应，否则值将传递错误；关键字传参就没有位置的限制，将关键字与值对应上赋予即可。不定长参数可以接受溢出的参数，溢出的未知参数用*args接受，溢出的关键字参数
用**kwargs接受。位置参数《关键字参数《不定长参数，我觉得这种划分方式是有问题的，因为*args既是不定长参数也是位置参数，但是却放在关键字参数的前面。本着将值一一对应传入的
原则，应像下面这么分：
位置参数《*args《关键字参数《**kwargs，在这种情况下，传参时*和**之间的又叫做命名关键字参数，我们可以分为两部分去看这个定义，“命名”是因为参数被赋予的变量名必须和定义函数时
里面的变量名一样，这叫“命名”；“关键字参数”是因为这些参数本质上还是以关键字的方式传参，只不过变量名已经固定而已
2.其实对于函数而言，return 的值是比较自由的，想返回啥就返回啥，主要看这个函数的功能及对下一步行动的影响，所以有return值对函数是有部分意义的，没有return值对函数也是有
意义的。函数的意义并不能单单以有没有返回值来定义，有就是有，没有就是没有，”有“发挥着作用，”没有“也发挥着作用
"""
# #3.
# a=int(input('输入一个数字：'))
# b=int(input('输入一个数字：'))
# c=int(input('输入一个数字：'))
# def f_seq(a, b, c):
#     amx = max(max(a,b),c)
#     cmin = min(min(a,b),c)
#     li = [a,b,c]
#     for i in li:
#         if cmin < i <amx:
#             print("发现中间数")
#             bmid = i
#     return cmin, bmid, amx
# result = f_seq(a,b,c)
# for ele in result:
#     print(ele)


#4.
def plus():
    st = 0

    for i in range(1, 991, 1):
        st += i
        i = i+1
    return st
print(plus())